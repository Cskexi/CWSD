{"ast":null,"code":"// export default {\n//   mounted() {\n//     window.addEventListener('beforeunload', this.onBeforeUnload);\n//   },\n//   methods: {\n//     onBeforeUnload() {\n//       // 执行清理操作，例如清除localStorage或sessionStorage\n//       localStorage.clear();\n//       sessionStorage.clear();\n\n//       // 如果使用Vuex，可以在这里提交一个action或mutation来清理状态\n//       // this.$store.dispatch('clearState');\n\n//       // 如果使用Axios，可以在这里清除Axios的拦截器或默认配置\n//       // axios.interceptors.response.eject(/* 拦截器ID */);\n//       // 或者重置Axios的默认配置\n//       // axios.defaults.baseURL = ''; // 根据需要重置\n//     }\n//   },\n//   // 在组件被销毁前移除事件监听器\n//   beforeDestroy() {\n//     window.removeEventListener('beforeunload', this.onBeforeUnload);\n//   }\n// };\nexport default {\n  mounted() {\n    // 使用window的addEventListener来监听浏览器关闭事件\n    window.addEventListener('beforeunload', this.onBeforeUnload);\n  },\n  methods: {\n    onBeforeUnload() {\n      // 这里执行清理操作，比如清除localStorage、sessionStorage等\n      localStorage.clear();\n      sessionStorage.clear();\n\n      // 如果使用Vuex，可以在这里提交一个action来清理状态\n      // this.$store.dispatch('someAction');\n\n      // 如果使用Axios，可以在这里清除Axios的拦截器或重置配置\n      // axios.interceptors.response.eject(/* 拦截器ID */);\n      // axios.defaults.baseURL = ''; // 根据需要重置\n    }\n  },\n  beforeDestroy() {\n    // 确保在组件销毁时移除事件监听器，避免内存泄漏\n    window.removeEventListener('beforeunload', this.onBeforeUnload);\n  }\n};","map":{"version":3,"names":["mounted","window","addEventListener","onBeforeUnload","methods","localStorage","clear","sessionStorage","beforeDestroy","removeEventListener"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\" style=\"height: 100%; width: 100%;\">\r\n    <router-view />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// export default {\r\n//   mounted() {\r\n//     window.addEventListener('beforeunload', this.onBeforeUnload);\r\n//   },\r\n//   methods: {\r\n//     onBeforeUnload() {\r\n//       // 执行清理操作，例如清除localStorage或sessionStorage\r\n//       localStorage.clear();\r\n//       sessionStorage.clear();\r\n\r\n//       // 如果使用Vuex，可以在这里提交一个action或mutation来清理状态\r\n//       // this.$store.dispatch('clearState');\r\n\r\n//       // 如果使用Axios，可以在这里清除Axios的拦截器或默认配置\r\n//       // axios.interceptors.response.eject(/* 拦截器ID */);\r\n//       // 或者重置Axios的默认配置\r\n//       // axios.defaults.baseURL = ''; // 根据需要重置\r\n//     }\r\n//   },\r\n//   // 在组件被销毁前移除事件监听器\r\n//   beforeDestroy() {\r\n//     window.removeEventListener('beforeunload', this.onBeforeUnload);\r\n//   }\r\n// };\r\nexport default {\r\n  mounted() {\r\n    // 使用window的addEventListener来监听浏览器关闭事件\r\n    window.addEventListener('beforeunload', this.onBeforeUnload);\r\n  },\r\n  methods: {\r\n    onBeforeUnload() {\r\n      // 这里执行清理操作，比如清除localStorage、sessionStorage等\r\n      localStorage.clear();\r\n      sessionStorage.clear();\r\n\r\n      // 如果使用Vuex，可以在这里提交一个action来清理状态\r\n      // this.$store.dispatch('someAction');\r\n\r\n      // 如果使用Axios，可以在这里清除Axios的拦截器或重置配置\r\n      // axios.interceptors.response.eject(/* 拦截器ID */);\r\n      // axios.defaults.baseURL = ''; // 根据需要重置\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // 确保在组件销毁时移除事件监听器，避免内存泄漏\r\n    window.removeEventListener('beforeunload', this.onBeforeUnload);\r\n  }\r\n};\r\n</script>\r\n\r\n\r\n<style lang=\"scss\">\r\n#body {\r\n  background-color: aqua;\r\n}\r\n</style>"],"mappings":"AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA,QAAA;IACA;IACAC,MAAA,CAAAC,gBAAA,sBAAAC,cAAA;EACA;EACAC,OAAA;IACAD,eAAA;MACA;MACAE,YAAA,CAAAC,KAAA;MACAC,cAAA,CAAAD,KAAA;;MAEA;MACA;;MAEA;MACA;MACA;IACA;EACA;EACAE,cAAA;IACA;IACAP,MAAA,CAAAQ,mBAAA,sBAAAN,cAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}